plugins {
    id("java-gradle-plugin")
    id("groovy")
    id("maven-publish")
    id("signing")

    id("org.jetbrains.kotlin.kapt") version "1.7.10"
    id("org.jetbrains.kotlin.jvm") version "1.7.10"

    id("org.jlleitschuh.gradle.ktlint") version "10.1.0"
    id("io.gitlab.arturbosch.detekt") version "1.21.0"
    id("com.github.hierynomus.license") version "0.16.1"

    id("org.jetbrains.dokka") version "1.7.20"
    id("com.gradle.plugin-publish") version "1.1.0"
}

def agpVersion = "8.0.0-rc01"
def kotlinVersion = "1.7.10"

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceSets {
    main {
        java {
            srcDir("build/generated/source/kapt/main")
        }
    }
}

compileGroovy {
    sourceCompatibility = "11"
    targetCompatibility = "11"
}

// compile groovy first, see
// https://docs.gradle.org/6.1-rc-1/release-notes.html#compilation-order
tasks.named("compileGroovy") {
    classpath = sourceSets.main.compileClasspath
}

tasks.named("compileKotlin") {
    classpath += files(sourceSets.main.groovy.classesDirectory)
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    kapt("com.squareup.moshi:moshi-kotlin-codegen:1.14.0")

    compileOnly("com.android.tools.build:gradle:$agpVersion")

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // For uploading proguard/ndk files
    implementation "com.squareup.okhttp3:okhttp:4.8.0"
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.9.0"
    implementation "com.squareup.retrofit2:converter-scalars:2.9.0"

    // For serialization of shared data
    implementation "com.squareup.moshi:moshi:1.9.3"

    // For multiple I/O use cases
    implementation "com.squareup.okio:okio:2.7.0"

    // For version checking
    implementation "org.semver:api:0.9.33"

    testImplementation "com.android.tools.build:gradle:$agpVersion"
    testImplementation 'junit:junit:4.13.1'
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation "com.squareup.okhttp3:mockwebserver:4.8.0"
    testImplementation "com.squareup.okhttp3:logging-interceptor:4.8.0"
    testImplementation "com.google.truth:truth:1.1.3"
}

//// Gradle plugin publishing settings (plugins.gradle.com)
gradlePlugin {
    website = POM_URL
    vcsUrl = POM_SCM_URL

    plugins {
        bugsnagPlugin {
            id = "com.bugsnag.android.gradle"
            implementationClass = "com.bugsnag.android.gradle.BugsnagPlugin"
            displayName = POM_NAME
            description = POM_DESCRIPTION
            tags.set(["bugsnag", "proguard", "android", "upload"])
        }
    }
}

publishing {
    repositories {
        maven {
            name = "Sonatype"
            if (VERSION_NAME.contains("SNAPSHOT")) {
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            }

            credentials {
                username = project.hasProperty("NEXUS_USERNAME") ? "$NEXUS_USERNAME" : System.getenv("NEXUS_USERNAME")
                password = project.hasProperty("NEXUS_PASSWORD") ? "$NEXUS_PASSWORD" : System.getenv("NEXUS_PASSWORD")
            }
        }
    }

    publications {
        pluginMaven(MavenPublication) {
            groupId = GROUP
            artifactId = POM_ARTIFACT_ID
            version = VERSION_NAME

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_URL
                    }
                }
                scm {
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                    url = POM_SCM_URL
                }
            }
        }
    }
}

signing {
    sign(publishing.publications["pluginMaven"])
}

// license checking
license {
    header rootProject.file("LICENSE")
    ignoreFailures true
}

downloadLicenses {
    dependencyConfiguration "compile"
}

sourceSets {
    main.java.srcDirs += "src/main/kotlin"
}

detekt {
    input = files("src/main/kotlin")
    baseline = file("detekt-baseline.xml")
    reports {
        html {
            enabled = true
        }
    }
}

ktlint {
    filter {
        exclude { element -> element.file.path.contains("/generated/") }
    }
}

sourceCompatibility = JavaVersion.VERSION_11
